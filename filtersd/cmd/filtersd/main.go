package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"strings"
)

var (
	t      = flag.String("type", "", "type name; must be set")
	output = flag.String("output", "", "output file name; default srcdir/<type>.go")
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of filtersd:\n")
	fmt.Fprintf(os.Stderr, "\tfiltersd [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tfiltersd [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

const f = `func %[2]s(ss []%[1]s, fs []func(i int) bool, shouldReturn bool) [][]%[1]s {
	result := make([][]%[1]s, len(fs)+1)
	util.FiltersD(len(ss), fs, func(i, j int) { result[i] = append(result[i], ss[j]) }, shouldReturn)
	return result
}`

type Generator struct {
	buf bytes.Buffer // Accumulated output.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("filtersd: ")
	flag.Usage = Usage
	flag.Parse()

	if len(*t) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	g := Generator{}
	g.Printf("// Code generated by \"filtersd %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package filtersd")
	g.Printf("\n")
	g.Printf("import util \"github.com/t3reezhou/golang_util\"\n") // Used by all methods.
	bs := []byte(*t)
	bs[0] = bytes.ToUpper(bs[:1])[0]
	g.Printf(f, *t, string(bs))

	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s.go", *t)
		outputName = filepath.Join("", strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, g.format(), 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}
